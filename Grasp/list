- information expert (class which is obligated to collect information)
- creator (classes should be crated by one which needs them))
- controller (special class for controlling operations, UI -> controller -> domain == save inner state and logic == sync procedure, etc.)
- low coupling (низкая связанность) (the moreconnection beetween projects, the better). Graph are no good. Easier to decompose the system.
- high cohesion (высокое зацепление)
- polymorphism (process different variants * = new), kind of strategy i think
- pure fabrication: (kind storage: database, for example)
- indiraction (indiraction of the connection). To exclude direct dependency from the object => use of the interface; server implements interface, for example.
- protected variations => be ready for changes: one part of the system doesn`t have effect on the other one;