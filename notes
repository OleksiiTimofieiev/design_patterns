~ SOLID:

1. separation of concerns -> different class for a specific purposes (pesistance manager);
2. open-closed principle -> classes should be open for extantions but not mods;
3. liskov substitution principle -> derived class should be have the possibility to be substituted whereever a base class;
4. Interface segragation -> not too much in one Interface;

[creational] ~ BUILDER;
[creational] ~ FACTORY;
[creational] ~ Absract factory;
[creational] ~ Prototype (good way to copy an instance)
[creational] ~ Singleton

[structural] ~ Adapter == adding the properties to the interface.
[structural] ~ Bridge (cool pimple pattern -> all secrets in cpp). Segregation of the functions
[structural] ~ Composite == mechanism for treating individual (scalar) objects and compositions of objects in a uniform manner. Individual objects and collections behave in the same manner.
[structural] ~ Decorator (dynamic or static) == adding behavior without altering the class itself
[structural] ~ Facade == encapsulation of the complex code
[structural] ~ Flyweight == space optimization technique that lets use less memory by storing externally the data associated with similar objects

[behavioral] ~ Observer == checking events from the necessary object
